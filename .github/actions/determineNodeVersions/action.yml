name: determine-node-versions
description: Calculate Node and Node-1 versions for unit tests

inputs:
  nodeVersionOverride:
    description: Semver version to set version and version-1
    required: false

outputs:
  nodeVersions:
    description: Node versions to be consumed by a workflow matrix
    value: ${{ steps.node-versions.outputs.nodeVersions }}

runs:
  using: composite
  steps:
    - name: Determine node versions
      shell: bash
      id: node-versions
      run: |
        # Current can be disabled by setting the GHA var "UT_DISABLE_NODE_CURRENT"
        # IF "NODE_VERSION" is overridden, "NODE_VERSION_CURRENT" will be disabled
        NODE_VERSION_CURRENT="current"
        NODE_VERSION="${{ inputs.nodeVersionOverride || 'lts/*' }}"
        NODE_PREVIOUS_LTS="lts/-1"

        if [ -n "${{ inputs.nodeVersionOverride }}" ]; then
          NODE_VERSION_MAJOR=$(echo "${{ inputs.nodeVersionOverride }}" | cut -d '.' -f 1)

          # LTS-1 will always be the previous LTS, which is always even. Here we calculate the nearest LTS
          if [ $((NODE_VERSION_MAJOR % 2)) == 0 ]; then
            NODE_PREVIOUS_LTS="$((NODE_VERSION_MAJOR - 2))"
          else
            NODE_PREVIOUS_LTS="$((NODE_VERSION_MAJOR - 1))"
          fi
        fi

        {
        echo "nodeVersions<<EOF"
        if [ "$NODE_VERSION" = "lts/*" ] && [ -z "$UT_DISABLE_NODE_CURRENT" ]; then
            jq -n --arg v1 "$NODE_VERSION_CURRENT" --arg v2 "$NODE_VERSION" --arg v3 "$NODE_PREVIOUS_LTS"  '[$v1, $v2, $v3]'
        else
            jq -n --arg v1 "$NODE_VERSION" --arg v2 "$NODE_PREVIOUS_LTS" '[$v1, $v2]'
        fi
        echo "EOF"
        } >> "$GITHUB_OUTPUT"

        # Sample output looks like this:
        #
        # nodeVersions<<EOF
        # [
        #   "current",
        #   "lts/*",
        #   "lts/-1",
        # ]
        # EOF
        #
        # OR...
        #
        # nodeVersions<<EOF
        # [
        #   "18.15.0",
        #   "16"
        # ]
        # EOF
